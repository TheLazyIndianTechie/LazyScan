name: Test Matrix

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      test-level:
        description: 'Test level to run'
        required: false
        default: 'all'
        type: choice
        options:
          - unit
          - integration
          - e2e
          - all

# Cancel in-progress workflows for the same branch
concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1
  PY_COLORS: 1
  PYTEST_ADDOPTS: "--color=yes"

jobs:
  # Quick smoke tests on the latest versions
  smoke-test:
    name: Quick Smoke Test
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false || github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov pytest-xdist

      - name: Run quick tests
        run: |
          pytest tests/unit -x -v --tb=short --maxfail=5

  # Full test matrix
  test-matrix:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: smoke-test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        include:
          # Test development versions on Ubuntu only
          - os: ubuntu-latest
            python-version: '3.13-dev'
            experimental: true
          # Test PyPy versions
          - os: ubuntu-latest
            python-version: 'pypy-3.9'
            experimental: true
          - os: ubuntu-latest
            python-version: 'pypy-3.10'
            experimental: true
        exclude:
          # macOS arm64 runners don't support Python 3.9
          - os: macos-latest
            python-version: '3.9'

    continue-on-error: ${{ matrix.experimental || false }}

    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Install any macOS-specific dependencies if needed
          echo "Setting up macOS environment"

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Install any Windows-specific dependencies if needed
          echo "Setting up Windows environment"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e .
          pip install pytest pytest-cov pytest-xdist pytest-mock pytest-timeout
          pip install tox

      - name: Run unit tests
        run: |
          pytest tests/unit -v --cov=lazyscan --cov=helpers \
            --cov-report=term-missing --cov-report=xml \
            --junit-xml=junit-unit-${{ matrix.os }}-${{ matrix.python-version }}.xml \
            --timeout=30

      - name: Run integration tests
        run: |
          pytest tests/integration -v \
            --junit-xml=junit-integration-${{ matrix.os }}-${{ matrix.python-version }}.xml \
            --timeout=60

      - name: Run end-to-end tests (Ubuntu/macOS only)
        if: matrix.os != 'windows-latest'
        run: |
          pytest tests/e2e -v \
            --junit-xml=junit-e2e-${{ matrix.os }}-${{ matrix.python-version }}.xml \
            --timeout=120

      - name: Run platform-specific tests
        run: |
          pytest tests/ -m "platform_specific" -v \
            --junit-xml=junit-platform-${{ matrix.os }}-${{ matrix.python-version }}.xml \
            --timeout=60

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: junit-*.xml
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-${{ matrix.python-version }}
          fail_ci_if_error: false

  # Tox testing for additional validation
  tox-test:
    name: Tox Test Environment
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tox-env: [lint, unit, integration, security, coverage]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install tox
        run: |
          python -m pip install --upgrade pip
          pip install tox

      - name: Run tox environment
        run: |
          tox -e ${{ matrix.tox-env }}

  # Performance testing
  performance-test:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.base.ref == 'main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-benchmark

      - name: Run performance tests
        run: |
          pytest tests/ -m "slow or performance" -v \
            --benchmark-json=benchmark-results.json \
            --benchmark-compare-fail=mean:20% \
            --timeout=300

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results
          path: benchmark-results.json
          retention-days: 30

  # Test summary and reporting
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [smoke-test, test-matrix, tox-test]
    if: always()

    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-results/

      - name: Generate test report
        run: |
          echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count test results
          total_files=$(find test-results/ -name "junit-*.xml" | wc -l)
          echo "📊 Total test result files: $total_files" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Smoke Test | ${{ needs.smoke-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Matrix | ${{ needs.test-matrix.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tox Tests | ${{ needs.tox-test.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const smokeStatus = '${{ needs.smoke-test.result }}';
            const matrixStatus = '${{ needs.test-matrix.result }}';
            const toxStatus = '${{ needs.tox-test.result }}';

            const overallStatus = smokeStatus === 'success' &&
                                 matrixStatus === 'success' &&
                                 toxStatus === 'success' ? '✅' : '❌';

            const body = `## Test Results ${overallStatus}

            | Test Suite | Status | Details |
            |------------|--------|---------|
            | 🚀 Smoke Tests | ${smokeStatus} | Quick validation on Python 3.11 |
            | 🧪 Test Matrix | ${matrixStatus} | Cross-platform testing (Python 3.9-3.12) |
            | 🔧 Tox Tests | ${toxStatus} | Isolated environment testing |

            ${overallStatus === '❌' ?
              '⚠️ Some tests failed. Please check the workflow logs for details.' :
              '🎉 All tests passed! Ready for review.'}

            <details>
            <summary>💡 Test Coverage & Performance</summary>

            - Coverage reports uploaded to Codecov
            - Performance benchmarks available in artifacts
            - Full test results available in workflow artifacts

            </details>

            ---
            *Automated comment by GitHub Actions*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Conditional deployment readiness check
  deployment-ready:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [test-matrix, tox-test]
    if: github.ref == 'refs/heads/main' && success()

    steps:
      - name: Check deployment readiness
        run: |
          echo "✅ All tests passed on main branch"
          echo "🚀 Ready for deployment"
          echo "deployment-ready=true" >> $GITHUB_OUTPUT

    outputs:
      ready: true
