name: Release

on:
  push:
    tags:
      - 'v*'  # Triggered on version tags (v1.0.0, v1.0.0-rc1, etc.)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'testpypi'
        type: choice
        options:
          - 'testpypi'
          - 'pypi'

permissions:
  contents: read
  id-token: write  # Required for OIDC trusted publishing

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      target-environment: ${{ steps.environment.outputs.target }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="${{ github.event.inputs.version }}"
        fi

        echo "version=${VERSION}" >> $GITHUB_OUTPUT

        # Check if this is a pre-release (contains alpha, beta, rc, dev, etc.)
        if [[ $VERSION =~ -[a-zA-Z] ]]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        fi

        echo "Detected version: ${VERSION}"
        echo "Is pre-release: $(echo $VERSION | grep -q '-[a-zA-Z]' && echo 'true' || echo 'false')"

    - name: Determine target environment
      id: environment
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          TARGET="${{ github.event.inputs.environment }}"
        elif [[ "${{ steps.version.outputs.is-prerelease }}" == "true" ]]; then
          TARGET="testpypi"
        else
          TARGET="pypi"
        fi

        echo "target=${TARGET}" >> $GITHUB_OUTPUT
        echo "Target environment: ${TARGET}"

    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+([a-zA-Z0-9\-\.]*)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: vX.Y.Z or vX.Y.Z-suffix"
          exit 1
        fi
        echo "Version format is valid: $VERSION"

  pre-release-checks:
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run linting
      run: |
        ruff check .
        ruff format --check .
        black --check .

    - name: Run type checking
      run: mypy --ignore-missing-imports lazyscan.py

    - name: Run security checks
      run: |
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Run tests
      run: |
        pytest --cov=. --cov-report=xml --cov-fail-under=40

    - name: Update version in package
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        VERSION_NUMBER="${VERSION#v}"  # Remove 'v' prefix

        # Update version in __init__.py if it exists
        if [ -f "lazyscan/__init__.py" ]; then
          sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION_NUMBER\"/" lazyscan/__init__.py
        fi

        # Update version in lazyscan.py if it exists
        if [ -f "lazyscan.py" ]; then
          sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION_NUMBER\"/" lazyscan.py
        fi

        echo "Updated package version to: $VERSION_NUMBER"

  build:
    runs-on: ubuntu-latest
    needs: [validate-release, pre-release-checks]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Update version in package
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        VERSION_NUMBER="${VERSION#v}"

        if [ -f "lazyscan/__init__.py" ]; then
          sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION_NUMBER\"/" lazyscan/__init__.py
        fi

        if [ -f "lazyscan.py" ]; then
          sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION_NUMBER\"/" lazyscan.py
        fi

    - name: Build distribution packages
      run: |
        python -m build
        ls -la dist/

    - name: Validate distribution
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 30

  publish-testpypi:
    runs-on: ubuntu-latest
    needs: [validate-release, build]
    if: needs.validate-release.outputs.target-environment == 'testpypi'
    environment: testpypi-publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        verbose: true
        print-hash: true

    - name: Verify TestPyPI publication
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        VERSION_NUMBER="${VERSION#v}"

        echo "Waiting for package to be available on TestPyPI..."
        sleep 30

        # Try to install from TestPyPI
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ "lazyscan==$VERSION_NUMBER" || echo "Package not yet available"

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [validate-release, build]
    if: needs.validate-release.outputs.target-environment == 'pypi'
    environment: pypi-production

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
        print-hash: true

    - name: Verify PyPI publication
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        VERSION_NUMBER="${VERSION#v}"

        echo "Waiting for package to be available on PyPI..."
        sleep 60

        # Try to install from PyPI
        pip install "lazyscan==$VERSION_NUMBER" || echo "Package not yet available"

  create-github-release:
    runs-on: ubuntu-latest
    needs: [validate-release, build, publish-testpypi, publish-pypi]
    if: always() && (needs.publish-testpypi.result == 'success' || needs.publish-pypi.result == 'success')
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

    - name: Generate release notes
      id: release-notes
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"

        # Extract changelog section for this version
        if [ -f "CHANGELOG.md" ]; then
          NOTES=$(awk "/^## \[?${VERSION#v}\]?/,/^## \[?[0-9]/{if(/^## \[?[0-9]/ && !/^## \[?${VERSION#v}\]?/)exit}1" CHANGELOG.md | head -n -1)
        else
          NOTES="Release $VERSION"
        fi

        # Save to file for GitHub release
        cat << 'EOF' > release-notes.md
        $NOTES

        ## Installation

        ```bash
        pip install lazyscan==${VERSION#v}
        ```

        ## Verification

        ```bash
        lazyscan --version
        ```
        EOF

        echo "Generated release notes for $VERSION"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        name: Release ${{ needs.validate-release.outputs.version }}
        body_path: release-notes.md
        files: dist/*
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
        generate_release_notes: true

  post-release-verification:
    runs-on: ubuntu-latest
    needs: [validate-release, publish-testpypi, publish-pypi]
    if: always() && (needs.publish-testpypi.result == 'success' || needs.publish-pypi.result == 'success')

    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Test installation and functionality
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        VERSION_NUMBER="${VERSION#v}"
        TARGET_ENV="${{ needs.validate-release.outputs.target-environment }}"

        echo "Testing installation from $TARGET_ENV..."

        if [[ "$TARGET_ENV" == "testpypi" ]]; then
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ "lazyscan==$VERSION_NUMBER"
        else
          pip install "lazyscan==$VERSION_NUMBER"
        fi

        # Test basic functionality
        lazyscan --version
        lazyscan --help

        echo "Installation and basic functionality test passed!"
