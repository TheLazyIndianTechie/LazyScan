name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/Library/Caches/pip
          %LOCALAPPDATA%\pip\Cache
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/constraints.txt', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install build tools and dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install -e .[dev] --constraint constraints.txt

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files

    - name: Lint with ruff
      run: |
        ruff check .

    - name: Check formatting with black
      run: |
        black --check .

    - name: Type check with mypy
      run: |
        mypy lazyscan/ helpers/

    - name: Run tests with coverage
      run: |
        pytest --cov=lazyscan --cov-report=xml --cov-report=term-missing tests/

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.os }}-${{ matrix.python-version }}
        path: coverage.xml

    - name: Validate security audit schema
      run: |
        python -c "
        from lazyscan.security.audit_encryption_schema import AuditEncryptionSchemaValidator
        from pathlib import Path
        import json

        # Load default policy
        default_policy_path = Path('lazyscan/security/default_policy.json')
        with open(default_policy_path, 'r') as f:
            policy = json.load(f)

        # Validate audit schema
        if 'audit' in policy:
            is_valid, errors = AuditEncryptionSchemaValidator.validate_schema(policy['audit'])
            if not is_valid:
                print('❌ Audit schema validation failed:')
                for error in errors:
                    print(f'  - {error}')
                exit(1)
            else:
                print('✅ Audit schema validation passed')
        else:
            print('❌ No audit configuration found in default policy')
            exit(1)
        "

    - name: Test CLI functionality
      run: |
        python lazyscan.py --version
        python lazyscan.py --no-disclaimer scan . --top 5

    - name: Security scan with pip-audit
      run: |
        pip install pip-audit --constraint constraints.txt
        pip-audit --format json --output audit-results.json
        # Check for critical vulnerabilities using grep
        if grep -q '"severity": "CRITICAL"' audit-results.json; then
          echo "❌ Found critical security vulnerabilities in dependencies"
          cat audit-results.json
          exit 1
        else
          echo "✅ No critical security vulnerabilities found"
        fi

    - name: Install Socket CLI for supply chain security
      run: |
        npm install -g @socketsecurity/cli

    - name: Run Socket supply chain security scan
      run: |
        socket scan --json --output socket-results.json || true
        # Check for critical issues
        if [ -f socket-results.json ]; then
          # Parse JSON and check for critical issues
          if grep -q '"severity": "critical"' socket-results.json || grep -q '"severity": "high"' socket-results.json; then
            echo "⚠️  Found critical or high severity supply chain issues"
            cat socket-results.json
            # Don't fail the build, just warn
          else
            echo "✅ No critical supply chain security issues found"
          fi
        else
          echo "⚠️  Socket scan did not produce results file"
        fi

  codecov:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-ubuntu-latest-3.11
        path: coverage-reports/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage-reports/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-3.11-${{ hashFiles('**/constraints.txt', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-3.11-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install -e .[dev] --constraint constraints.txt

    - name: Run performance smoke test
      run: |
        echo "🚀 Running performance smoke test..."

        # Test basic CLI responsiveness
        time python lazyscan.py --version

        # Test scan performance on a small directory
        mkdir -p /tmp/perf_test
        echo "test content" > /tmp/perf_test/file1.txt
        echo "test content" > /tmp/perf_test/file2.txt

        # Measure scan performance
        echo "📊 Measuring scan performance..."
        { time python lazyscan.py --no-disclaimer scan /tmp/perf_test --top 5; } 2>&1 | grep real | awk '{print "Scan time:", $2}'

        # Test help command performance
        { time python lazyscan.py --help; } 2>&1 | grep real | awk '{print "Help time:", $2}'

        # Clean up
        rm -rf /tmp/perf_test

        echo "✅ Performance smoke test completed"

  socket-security:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev] --constraint constraints.txt

    - name: Run Socket.dev security scan
      uses: SocketSecurity/socket-security-action@v1
      with:
        api-token: ${{ secrets.SOCKET_SECURITY_API_TOKEN }}
        fail-on-issues: false  # Don't fail builds, just report issues

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/Library/Caches/pip
          %LOCALAPPDATA%\pip\Cache
        key: ${{ runner.os }}-pip-3.11-${{ hashFiles('**/constraints.txt', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-3.11-
          ${{ runner.os }}-pip-

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install build --constraint constraints.txt

    - name: Build distribution
      run: |
        python -m build

    - name: Store build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/