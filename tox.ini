[tox]
envlist = py39, py310, py311, py312, lint, coverage, security
isolated_build = True
skip_missing_interpreters = True
minversion = 4.0

[gh-actions]
python =
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312

[testenv]
deps = 
    pytest>=7.0,<8.0
    pytest-cov>=4.0,<5.0
    pytest-mock>=3.10,<4.0
    pyfakefs>=4.0,<6.0
    pytest-timeout>=2.1,<3.0
    pytest-xdist>=3.0,<4.0
    pytest-html>=3.1,<4.0
    coverage[toml]>=7.0,<8.0

setenv =
    PYTHONPATH = {toxinidir}
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}

commands = 
    pytest {posargs:tests/ --cov=lazyscan --cov-report=term-missing}

passenv = 
    CI
    GITHUB_*
    HOME
    XDG_*

[testenv:py39]
basepython = python3.9
commands = pytest {posargs:tests/ -m "not slow"}

[testenv:py310]
basepython = python3.10
commands = pytest {posargs:tests/ -m "not slow"}

[testenv:py311]
basepython = python3.11
commands = pytest {posargs:tests/ -m "not slow"}

[testenv:py312]
basepython = python3.12
commands = pytest {posargs:tests/}

# Unit tests only environment
[testenv:unit]
deps = {[testenv]deps}
commands = pytest {posargs:tests/unit/ -m unit --cov=lazyscan --cov-report=term-missing}

# Integration tests only environment
[testenv:integration]
deps = {[testenv]deps}
commands = pytest {posargs:tests/integration/ -m integration --cov=lazyscan --cov-report=term-missing}

# End-to-end tests only environment
[testenv:e2e]
deps = {[testenv]deps}
commands = pytest {posargs:tests/e2e/ -m e2e --cov=lazyscan --cov-report=term-missing}

# Fast tests (unit + integration, no e2e)
[testenv:fast]
deps = {[testenv]deps}
commands = pytest {posargs:tests/ -m "not e2e and not slow" --cov=lazyscan --cov-report=term-missing}

# All tests including slow ones
[testenv:all]
deps = {[testenv]deps}
commands = pytest {posargs:tests/ --run-slow --cov=lazyscan --cov-report=term-missing}

# Coverage reporting environment
[testenv:coverage]
deps = 
    {[testenv]deps}
    coverage[toml]>=7.0,<8.0
skip_install = false
commands = 
    pytest --cov=lazyscan --cov-report=xml:reports/coverage.xml --cov-report=html:reports/coverage_html --cov-fail-under=80
    coverage html --directory=reports/coverage_html
    coverage xml --output=reports/coverage.xml
    coverage json --output=reports/coverage.json
    coverage report --show-missing

# Linting environment
[testenv:lint]
deps = 
    ruff>=0.1.0,<1.0
    black>=24.0,<25.0
    mypy>=1.5,<2.0
    types-setuptools
skip_install = true
commands = 
    ruff check lazyscan tests
    black --check --diff lazyscan tests
    mypy lazyscan

# Security scanning environment
[testenv:security]
deps = 
    bandit>=1.7,<2.0
    safety>=2.3,<3.0
    pip-audit>=2.6,<3.0
skip_install = true
commands = 
    bandit -r lazyscan -f json -o reports/bandit-report.json
    bandit -r lazyscan
    pip-audit --format=json --output=reports/pip-audit-report.json
    pip-audit
    safety check --json --output reports/safety-report.json
    safety check

# Documentation building environment
[testenv:docs]
deps = 
    mkdocs>=1.5,<2.0
    mkdocs-material>=9.0,<10.0
    pdoc>=14.0,<15.0
changedir = {toxinidir}
commands = 
    mkdocs build
    pdoc --html --output-dir docs/api lazyscan

# Performance testing environment
[testenv:performance]
deps = 
    {[testenv]deps}
    pytest-benchmark>=4.0,<5.0
    memory-profiler>=0.60,<1.0
commands = 
    pytest tests/ -m performance --benchmark-only --benchmark-json=reports/benchmark.json

# Clean environment - remove all generated files
[testenv:clean]
deps = 
skip_install = true
allowlist_externals = 
    rm
    find
commands = 
    rm -rf reports/
    rm -rf .coverage*
    rm -rf .pytest_cache/
    rm -rf .tox/
    find . -type d -name "__pycache__" -exec rm -rf {} +
    find . -type f -name "*.pyc" -delete

[coverage:run]
source = lazyscan
branch = True
parallel = True

[coverage:paths]
source =
    lazyscan
    .tox/*/lib/python*/site-packages/lazyscan

[coverage:report]
precision = 2
show_missing = True
skip_covered = False